{
  "presentation": "Lecture 9. Parameterized complexity",
  "slideDict": {
    "1:2": "First_slide",
    "1:6": "Vertex_cover",
    "2:0": "Vertex_cover_is_NP_complete",
    "7:96": "NP_completeness_of_vertex_cover",
    "11:18": "fixed_k",
    "11:25": "FPT_for_vertex_cover",
    "11:203": "ETH_Vertex_cover",
    "11:160": "FPT",
    "13:31": "Clique",
    "13:54": "From_k-clique_to_automata",
    "15:10": "Treewidth",
    "15:18": "Treewidthx",
    "15:290": "A_tree_decomposition",
    "21:0": "Bodlaender",
    "21:226": "Use_tree_decomposition",
    "25:2": "FPT_reductions",
    "25:17": "From_Turing_to_clique",
    "26:128": "From_Turing_to_clique_2"
  },
  "soundDict": {},
  "tree": {
    "type": "child",
    "name": "First slide",
    "id": "1:2",
    "children": [
      {
        "type": "show",
        "id": "24:2",
        "name": "Idea. So far, we measured the complexity of an algorithm as f (input size)?",
        "disabled": false
      },
      {
        "type": "show",
        "id": "24:3",
        "name": "What if there were other parameters: f (input size, some other parameter)?",
        "disabled": false
      },
      {
        "type": "show",
        "id": "24:4",
        "name": "graph size",
        "disabled": false
      },
      {
        "type": "show",
        "id": "24:5",
        "name": "number of colours",
        "disabled": false
      },
      {
        "type": "child",
        "name": "Vertex cover",
        "id": "1:6",
        "children": [
          {
            "type": "show",
            "id": "21:333",
            "name": "A vertex cover for a graph is a set of vertices which is incident with every edge.",
            "disabled": false
          },
          {
            "type": "show",
            "id": "1:58",
            "name": "The following problem is NP-complete: Input. A graph and a number k. Question. Is there a vertex cover of size \u2264 k?",
            "disabled": false
          },
          {
            "type": "child",
            "name": "Vertex cover is NP complete",
            "id": "2:0",
            "children": [
              {
                "type": "show",
                "id": "7:98",
                "name": "Proof. A reduction from 3-CNF-SAT",
                "disabled": false
              },
              {
                "type": "child",
                "name": "NP completeness of vertex cover",
                "id": "7:96",
                "children": [
                  {
                    "type": "show",
                    "id": "11:12",
                    "name": "Consider an instance of 3-CNF-SAT",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "7:91",
                    "name": "\u00aca",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "7:92",
                    "name": "for every clause there is a triangle",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "7:90",
                    "name": "a",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "7:94",
                    "name": "for every variable we create an edge",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "7:89",
                    "name": "Group 10",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "7:95",
                    "name": "edges connect appearances of a variable",
                    "disabled": false
                  },
                  {
                    "type": "hide",
                    "id": "7:92",
                    "name": "for every clause there is a triangle",
                    "disabled": false
                  },
                  {
                    "type": "hide",
                    "id": "7:95",
                    "name": "edges connect appearances of a variable",
                    "disabled": false
                  },
                  {
                    "type": "hide",
                    "id": "7:94",
                    "name": "for every variable we create an edge",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:14",
                    "name": "formula is satisfiable",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:9",
                    "name": "\u27f9",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "7:100",
                    "name": "Take a satisfying assignment, and select for each variable the corresponding vertex in each blue edge.",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:11",
                    "name": "Group 13",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:6",
                    "name": "In every triangle, some vertex has its red edge covered.",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:7",
                    "name": "Select the remaining two vertices.",
                    "disabled": false
                  },
                  {
                    "type": "hide",
                    "id": "11:11",
                    "name": "Group 13",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:8",
                    "name": "\u27f9",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:0",
                    "name": "At least one vertex must be selected for each blue edge",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:1",
                    "name": "At least two vertices must be selected for each triangle",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "7:101",
                    "name": "A vertex cover of this size needs exactly: 1. one vertex per blue edge, 2. two vertices per black triangle",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "8:2",
                    "name": "To be a cover, it needs to describe a satisfying assignment.",
                    "disabled": false
                  }
                ]
              },
              {
                "type": "show",
                "id": "11:15",
                "name": "linear",
                "disabled": false
              }
            ]
          },
          {
            "type": "show",
            "id": "11:17",
            "name": "What about fixed k?",
            "disabled": false
          },
          {
            "type": "child",
            "name": "fixed k",
            "id": "11:18",
            "children": [
              {
                "type": "show",
                "id": "21:329",
                "name": "Algorithm 1. Search all subsets of size \u2264 k",
                "disabled": false
              },
              {
                "type": "show",
                "id": "11:153",
                "name": "Polynomial for fixed k, but the polynomial and its degree depend on k",
                "disabled": false
              },
              {
                "type": "show",
                "id": "21:330",
                "name": "Algorithm 2.",
                "disabled": false
              },
              {
                "type": "show",
                "id": "11:158",
                "name": "Polynomial for fixed k, and degree of polynomial does not depend on k",
                "disabled": false
              },
              {
                "type": "child",
                "name": "FPT for vertex cover",
                "id": "11:25",
                "children": [
                  {
                    "type": "show",
                    "id": "11:149",
                    "name": "An algorithm that runs in time",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:148",
                    "name": "linear time for fixed k",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:88",
                    "name": "?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:87",
                    "name": "?",
                    "disabled": false
                  },
                  {
                    "type": "hide",
                    "id": "11:87",
                    "name": "?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:89",
                    "name": "Recursive procedure",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:150",
                    "name": "If k vertices are \u201cyes\u201d then stop.",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:151",
                    "name": "Take the first undecided vertex v .",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:49",
                    "name": "Succeed if one of the following succeds:",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:81",
                    "name": "1. set v to \u201cyes\u201d, and recurse",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:82",
                    "name": "2. set v to \u201cno\u201d, set all of its undecided neighbours to \u201cyes\u201d, and recurse",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:152",
                    "name": "The recursion tree is a binary tree of depth at most k",
                    "disabled": false
                  }
                ]
              },
              {
                "type": "show",
                "id": "11:205",
                "name": "Under the Exponential Time Hypothesis, algorithm 2 is optimal.",
                "disabled": false
              },
              {
                "type": "child",
                "name": "ETH Vertex cover",
                "id": "11:203",
                "children": [
                  {
                    "type": "show",
                    "id": "21:307",
                    "name": "Exponential Time Hypothesis",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:308",
                    "name": "eth",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:309",
                    "name": "algo 1",
                    "disabled": false
                  },
                  {
                    "type": "hide",
                    "id": "21:308",
                    "name": "eth",
                    "disabled": false
                  },
                  {
                    "type": "hide",
                    "id": "21:309",
                    "name": "algo 1",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:319",
                    "name": "contrapositive",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:216",
                    "name": "Proof. Our reduction from 3-CNF-SAT to vertex cover created an instance where both the number of vertices and cover size are \u2264 2(number of clauses).",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:328",
                    "name": "2",
                    "disabled": false
                  }
                ]
              },
              {
                "type": "show",
                "id": "21:331",
                "name": "This is an example of a fixed parameter tractable algorithm.",
                "disabled": false
              },
              {
                "type": "child",
                "name": "FPT",
                "id": "11:160",
                "children": [
                  {
                    "type": "show",
                    "id": "21:305",
                    "name": "Consider a computational problem, where each instance has two associated numbers: size and parameter.",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:298",
                    "name": "Can a graph with n vertices be coloured by k colours?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:299",
                    "name": "Is a k-CNF formula satisfiable?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:300",
                    "name": "Does a graph of size n have a vertex cover of size \u2264 k?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:301",
                    "name": "Does a graph of size n contain a clique of size \u2264 k?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:302",
                    "name": "Many graph problems, e.g. 3-colourability.",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:306",
                    "name": "The problem is fixed parameter tractable if it can be solved in time",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:188",
                    "name": "fpt?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:303",
                    "name": "no*",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:194",
                    "name": "no*",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:195",
                    "name": "yes",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:304",
                    "name": "no**",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "11:197",
                    "name": "yes",
                    "disabled": false
                  }
                ]
              },
              {
                "type": "child",
                "name": "Treewidth",
                "id": "15:10",
                "children": [
                  {
                    "type": "show",
                    "id": "15:12",
                    "name": "Many hard problems are easy on graphs similar to trees.",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "15:13",
                    "name": "3-colourability",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "15:14",
                    "name": "Hamiltonian path",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "15:15",
                    "name": "Vertex cover",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "15:16",
                    "name": "FPT when the parameter is treewidth",
                    "disabled": false
                  },
                  {
                    "type": "child",
                    "name": "Treewidth",
                    "id": "15:18",
                    "children": [
                      {
                        "type": "show",
                        "id": "15:21",
                        "name": "A graph with ports is a graph with distinguished distinguished vertices.",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "20:32",
                        "name": "ports",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "15:20",
                        "name": "Definition. A graph has treewidth k \u2208 {1,2, ...} if it can be constructed using the following operations, so that in every moment at most k+1 ports are used.",
                        "disabled": false
                      },
                      {
                        "type": "hide",
                        "id": "20:32",
                        "name": "ports",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "20:33",
                        "name": "Constant",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "20:34",
                        "name": "Forget",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "20:35",
                        "name": "Output: the chosen port is no longer a port",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "20:36",
                        "name": "Fuse",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "20:37",
                        "name": "Output: the disjoint union, except that pairs from the bijection are fused",
                        "disabled": false
                      },
                      {
                        "type": "child",
                        "name": "A tree decomposition",
                        "id": "15:290",
                        "children": [
                          {
                            "type": "show",
                            "id": "15:515",
                            "name": "The 8-cycle has treewidth 2, because it can be constructed using 3 ports.",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:38",
                            "name": "Group 39",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:39",
                            "name": "Group 40",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:40",
                            "name": "Group 41",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:42",
                            "name": "Group 43",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:43",
                            "name": "Group 44",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:44",
                            "name": "Group 45",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:45",
                            "name": "Group 46",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:46",
                            "name": "Group 47",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:47",
                            "name": "Group 48",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:48",
                            "name": "Group 49",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "20:49",
                            "name": "Group 50",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "15:516",
                            "name": "All cycles have treewidth 2.",
                            "disabled": false
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "show",
                    "id": "21:284",
                    "name": "Theorem. 3-colourability can be solved in time",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:268",
                    "name": "Step 1. Compute the tree decomposition",
                    "disabled": false
                  },
                  {
                    "type": "child",
                    "name": "Bodlaender",
                    "id": "21:0",
                    "children": [
                      {
                        "type": "show",
                        "id": "21:285",
                        "name": "Theorem. Bodlander Given k \u2208 {1, 2, ...} and a graph, one can compute a width k tree decomposition, or say that one does not exist, in time",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:4",
                        "name": "exponential",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:222",
                        "name": "for graphs of treewidth k, number of edges \u2264 (k+1)2 \u00d7 (number of vertices)",
                        "disabled": false
                      }
                    ]
                  },
                  {
                    "type": "show",
                    "id": "21:269",
                    "name": "Step 2. Check 3-colourability using a bottom-up pass on the tree decomposition.",
                    "disabled": false
                  },
                  {
                    "type": "child",
                    "name": "Use tree decomposition",
                    "id": "21:226",
                    "children": [
                      {
                        "type": "show",
                        "id": "21:286",
                        "name": "Group 51",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:289",
                        "name": "Consider a node of the tree decomposition, which describes a graph with ports.",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:290",
                        "name": "The signature of this node is the set of all colourings",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:291",
                        "name": "Fact. The signature of a node can be computed from the signatures of its children, in time",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:265",
                        "name": "Constant: exhaustive search",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:266",
                        "name": "Forget: restrict the signature to smaller set",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:267",
                        "name": "Fusion: interserction of signatures",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:292",
                        "name": "Corollary. The signature of the root node can be computed in time",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:264",
                        "name": "linear in the number of vertices",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "21:263",
                        "name": "The graph is 3-colourable iff the signature of the root node is nonempty.",
                        "disabled": false
                      }
                    ]
                  },
                  {
                    "type": "show",
                    "id": "21:282",
                    "name": "Theorem. Courcelle This proof works for every problem that can be formalised in monadic second-order logic.",
                    "disabled": false
                  }
                ]
              },
              {
                "type": "show",
                "id": "21:332",
                "name": "This is an example of an XP algorithm.",
                "disabled": false
              },
              {
                "type": "show",
                "id": "13:27",
                "name": "Between these, there are other complexity classes of parameterised problems.",
                "disabled": false
              },
              {
                "type": "child",
                "name": "Clique",
                "id": "13:31",
                "children": [
                  {
                    "type": "show",
                    "id": "21:295",
                    "name": "Problem 1. Given a graph, does it contain a clique of size k?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "13:52",
                    "name": "Conjecture: Problem 1 is not in FPT",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "21:296",
                    "name": "Problem 2. Given k nondeterministic automata, is there some word accepted by all of them?",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "13:53",
                    "name": "Lemma: If Problem 2 is FPT, then so is Problem 1.",
                    "disabled": false
                  },
                  {
                    "type": "child",
                    "name": "From k-clique to automata",
                    "id": "13:54",
                    "children": [
                      {
                        "type": "show",
                        "id": "13:56",
                        "name": "Given a graph, we want to know if it contains a clique of size k.",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "27:36",
                        "name": "We will define a Turing machine of size O(vertices3) such that:",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "27:37",
                        "name": "The graph has a clique of size k",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "27:38",
                        "name": "iff",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "27:39",
                        "name": "The Turing machine has an accepting computation of length \u2264 k3",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "15:5",
                        "name": "We define k automata over the alphabet of vertices as follows.",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "27:7",
                        "name": "for every i < j \u2208 {1,.., k}, the i-th and j-th letters in the input word describe an edge in the graph",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "27:5",
                        "name": "time k3",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:21",
                        "name": "If there would be an FPT algorithm for interesection of k automata, then the same would be true for k-clique.",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:10",
                        "name": "\u27f9",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:22",
                        "name": "If there would be an FPT algorithm for interesection of k automata, then the same would be true for k-clique.",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "27:41",
                        "name": "If there would be an FPT algorithm for interesection of k automata, then the same would be true for k-clique.",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:11",
                        "name": "If there would be an FPT algorithm for interesection of k automata, then the same would be true for k-clique.",
                        "disabled": false
                      }
                    ]
                  },
                  {
                    "type": "show",
                    "id": "21:297",
                    "name": "An FPT reduction is a function from instances of Problem 1 to instances of Problem 2",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "13:50",
                    "name": "It is designed so that if Problem 2 is in FPT, then so is Problem 1",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "13:45",
                    "name": "(a) output parameter: depends (computably) on input parameter",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "13:51",
                    "name": "(output parameter does not depend on instance)",
                    "disabled": false
                  },
                  {
                    "type": "show",
                    "id": "13:46",
                    "name": "(b) output size: FPT in terms of input size",
                    "disabled": false
                  },
                  {
                    "type": "child",
                    "name": "FPT reductions",
                    "id": "25:2",
                    "children": [
                      {
                        "type": "show",
                        "id": "28:12",
                        "name": "Examples of FPT reductions",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:24",
                        "name": "Does a graph contain a clique of size k?",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "25:12",
                        "name": "Arrow 5",
                        "disabled": false
                      },
                      {
                        "type": "child",
                        "name": "From Turing to clique",
                        "id": "25:17",
                        "children": [
                          {
                            "type": "show",
                            "id": "25:19",
                            "name": "Suppose that we want to know if a nondeterministic Turing machine M has an accepting computation of length k.",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "28:29",
                            "name": "problem is equally hard for deterministic",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "28:28",
                            "name": "p",
                            "disabled": false
                          },
                          {
                            "type": "show",
                            "id": "26:119",
                            "name": "The existence of such a computation can be rephrased as the existence of a a clique of size (k \u2013 2) \u00d7 (k \u2013 1) inside a graph of size poly(M)",
                            "disabled": false
                          },
                          {
                            "type": "child",
                            "name": "From Turing to clique 2",
                            "id": "26:128",
                            "children": [
                              {
                                "type": "show",
                                "id": "28:30",
                                "name": "?",
                                "disabled": false
                              },
                              {
                                "type": "show",
                                "id": "26:696",
                                "name": "1. the window is consistent with the transition relation of the Turing machine",
                                "disabled": false
                              },
                              {
                                "type": "show",
                                "id": "26:697",
                                "name": "2. if the window covers top-left corner, then the initial state is used there",
                                "disabled": false
                              },
                              {
                                "type": "show",
                                "id": "26:698",
                                "name": "3. if the window covers a state in the last line, then that state is accepting",
                                "disabled": false
                              },
                              {
                                "type": "show",
                                "id": "28:2",
                                "name": "Graph of windows: vertices are windows, and an edge connects two windows if they are consistent (agree on the overlap).",
                                "disabled": false
                              },
                              {
                                "type": "show",
                                "id": "28:6",
                                "name": "consistent",
                                "disabled": false
                              },
                              {
                                "type": "show",
                                "id": "28:31",
                                "name": "not consistent",
                                "disabled": false
                              },
                              {
                                "type": "show",
                                "id": "26:700",
                                "name": "There is an accepting computation of length k iff The graph of windows contains a clique of size (k \u2013 2) \u00d7 (k \u2013 1)",
                                "disabled": false
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "show",
                        "id": "28:25",
                        "name": "Does a graph have a vertex cover of size k?",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:18",
                        "name": "FPT",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:26",
                        "name": "Does a graph of treewidth k contain a Hamiltonian path?",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:17",
                        "name": "W[1]",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "25:7",
                        "name": "Does a circuit accept some input with exactly k ones?",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:27",
                        "name": "Variables of the circuit are vertices",
                        "disabled": false
                      },
                      {
                        "type": "show",
                        "id": "28:19",
                        "name": "W[P]",
                        "disabled": false
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}