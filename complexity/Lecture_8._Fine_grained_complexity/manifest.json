{
  "version": 0.92,
  "presentation": "Lecture 8. Fine grained complexity",
  "slideDict": {
    "1:2": "First_slide",
    "1:8": "OVC",
    "5:3": "SETH_implies_OVC",
    "7:26": "SETH_implies_OVC_part_2",
    "7:399": "SETH",
    "16:93": "Real_SETH",
    "16:146": "NFA_evaluation",
    "16:165": "Proof_for_NFA",
    "16:200": "String_for_list_of__vectors",
    "16:202": "Automaton_for_list_of_vectors",
    "29:0": "ETH_what_does_it_mean",
    "31:27": "Quasipolynomial_time",
    "32:29": "Sparsification",
    "67:2": "3-CNF-SAT",
    "67:203": "from_SAT_to_3-CNF-SAT"
  },
  "tree": {
    "type": "child",
    "name": "First slide",
    "id": "1:2",
    "merged": false,
    "children": [
      {
        "type": "child",
        "name": "3-CNF-SAT",
        "id": "67:2",
        "children": [
          {
            "type": "show",
            "id": "81:4",
            "name": "How hard is SAT?",
            "disabled": false,
            "keywords": [
              "How hard is SAT?"
            ],
            "eventId": "0"
          },
          {
            "type": "show",
            "id": "88:5",
            "name": "(x1 ∨ ¬x2 ∨ x3) ∧ ( ¬x3 ∨ ¬x4 ∨ x5) ∧ (¬x1 ∨ ¬x4 ∨ x6) ∧ (x2 ∨ x3 ∨ ¬x6)",
            "disabled": false,
            "keywords": [
              "(x1 ∨ ¬x2 ∨ x3) ∧ ( ¬x3 ∨ ¬x4 ∨ x5) ∧ (¬x1 ∨ ¬x4 ∨ x6) ∧ (x2 ∨ x3 ∨ ¬x6)",
              "A formula is in CNF form if it is a conjunction of disjunctions",
              "A common variant of SAT is 3-CNF-SAT"
            ],
            "eventId": "1"
          },
          {
            "type": "show",
            "id": "88:6",
            "name": "a disjunction is called a clause, and in 3-CNF clauses have size 3",
            "disabled": false,
            "keywords": [
              "a disjunction is called a clause, and in 3-CNF clauses have size 3"
            ],
            "eventId": "2"
          },
          {
            "type": "show",
            "id": "67:8",
            "name": "3-CNF-SAT is also NP-complete.",
            "disabled": false,
            "keywords": [
              "3-CNF-SAT is also NP-complete."
            ],
            "eventId": "3"
          },
          {
            "type": "child",
            "name": "from SAT to 3-CNF-SAT",
            "id": "67:203",
            "children": [
              {
                "type": "show",
                "id": "67:9",
                "name": "For every subformula we create a new variable, and write clauses which ensure that these variables have the same values as the subformulas",
                "disabled": false,
                "keywords": [
                  "For every subformula we create a new variable, and write clauses which ensure that these variables have the same values as the subformulas"
                ],
                "eventId": "0"
              },
              {
                "type": "show",
                "id": "67:192",
                "name": "if the subformula is",
                "disabled": false,
                "keywords": [
                  "if the subformula is",
                  "then we add these clauses:"
                ],
                "eventId": "1"
              },
              {
                "type": "show",
                "id": "67:202",
                "name": "if the subformula is , then we use the same idea, and ∨ is treated using DeMorgan’s laws.",
                "disabled": false,
                "keywords": [
                  "if the subformula is , then we use the same idea, and ∨ is treated using DeMorgan’s laws."
                ],
                "eventId": "2"
              },
              {
                "type": "show",
                "id": "67:205",
                "name": "The conversion from SAT to 3-CNF-SAT is linear.",
                "disabled": false,
                "keywords": [
                  "The conversion from SAT to 3-CNF-SAT is linear."
                ],
                "eventId": "3"
              }
            ],
            "keywords": [
              "from SAT to 3-CNF-SAT"
            ],
            "eventId": "4"
          },
          {
            "type": "show",
            "id": "81:1",
            "name": "Enormous engineering progress",
            "disabled": false,
            "keywords": [
              "Enormous engineering progress"
            ],
            "eventId": "5"
          },
          {
            "type": "show",
            "id": "81:3",
            "name": "SAT solvers in this year’s SAT competition take 15 minutes to solve 3-CNF-SAT instances with millions of clauses.",
            "disabled": false,
            "keywords": [
              "SAT solvers in this year’s SAT competition take 15 minutes to solve 3-CNF-SAT instances with millions of clauses."
            ],
            "eventId": "6"
          },
          {
            "type": "show",
            "id": "88:7",
            "name": "3-CNF-SAT can be solved in time",
            "disabled": false,
            "keywords": [
              "3-CNF-SAT can be solved in time",
              "2",
              "0.410(number of variables)",
              "Hofmeister 2002"
            ],
            "eventId": "7"
          },
          {
            "type": "show",
            "id": "88:8",
            "name": "0.001(number of variables)",
            "disabled": false,
            "keywords": [
              "0.001(number of variables)",
              "What about",
              "?",
              "2"
            ],
            "eventId": "8"
          },
          {
            "type": "child",
            "name": "SETH",
            "id": "7:399",
            "children": [
              {
                "type": "show",
                "id": "17:18",
                "name": "Exponential Time Hypothesis There is some 0 < λ ≤ 1 such that SAT cannot be solved faster than",
                "disabled": false,
                "keywords": [
                  "2",
                  "λ(number of variables)",
                  "Exponential Time Hypothesis: For some 0 < λ ≤ 1, 3-CNF-SAT needs time",
                  "Exponential Time Hypothesis There is some 0 < λ ≤ 1 such that SAT cannot be solved faster than"
                ],
                "eventId": "0"
              },
              {
                "type": "child",
                "name": "ETH what does it mean",
                "id": "29:0",
                "children": [
                  {
                    "type": "show",
                    "id": "88:14",
                    "name": "for every λ > 0 3-CNF-SAT can be solved in time",
                    "disabled": false,
                    "keywords": [
                      "for every λ > 0 3-CNF-SAT can be solved in time",
                      "2",
                      "λ(number of variables)"
                    ],
                    "eventId": "0"
                  },
                  {
                    "type": "show",
                    "id": "88:18",
                    "name": "maybe sat",
                    "disabled": false,
                    "keywords": [
                      "2",
                      "log2(number of variables)",
                      "Example: time",
                      "log(number of variables)",
                      "(number of variables)",
                      "=",
                      "maybe sat"
                    ],
                    "eventId": "1"
                  },
                  {
                    "type": "show",
                    "id": "88:13",
                    "name": "for every λ > 0 3-CNF-SAT can be solved in time",
                    "disabled": false,
                    "keywords": [
                      "for every λ > 0 3-CNF-SAT can be solved in time",
                      "2",
                      "λ(formula size)"
                    ],
                    "eventId": "2"
                  },
                  {
                    "type": "show",
                    "id": "88:12",
                    "name": "for every λ > 0 SAT can be solved in time",
                    "disabled": false,
                    "keywords": [
                      "for every λ > 0 SAT can be solved in time",
                      "2",
                      "λ(formula size)"
                    ],
                    "eventId": "3"
                  },
                  {
                    "type": "show",
                    "id": "31:32",
                    "name": "⟹",
                    "disabled": false,
                    "keywords": [
                      "⟹"
                    ],
                    "eventId": "4"
                  },
                  {
                    "type": "show",
                    "id": "31:33",
                    "name": "⟹",
                    "disabled": false,
                    "keywords": [
                      "⟹"
                    ],
                    "eventId": "5"
                  },
                  {
                    "type": "show",
                    "id": "88:16",
                    "name": "⟹",
                    "disabled": false,
                    "keywords": [
                      "⟹",
                      "because the reduction from SAT to 3-CNF-SAT makes the formula <10 times bigger"
                    ],
                    "eventId": "6"
                  },
                  {
                    "type": "show",
                    "id": "31:39",
                    "name": "⟹",
                    "disabled": false,
                    "keywords": [
                      "⟹"
                    ],
                    "eventId": "7"
                  },
                  {
                    "type": "child",
                    "name": "From variables to clauses",
                    "id": "31:27",
                    "children": [
                      {
                        "type": "show",
                        "id": "88:19",
                        "name": "Assume",
                        "disabled": false,
                        "keywords": [
                          "2",
                          "δ(formula size)",
                          "Assume: for every δ > 0, we can solve 3-CNF-SAT in time",
                          "Assume"
                        ],
                        "eventId": "0"
                      },
                      {
                        "type": "show",
                        "id": "88:20",
                        "name": "To show: for every λ > 0, we can solve 3-CNF-SAT in time",
                        "disabled": false,
                        "keywords": [
                          "To show: for every λ > 0, we can solve 3-CNF-SAT in time",
                          "2",
                          "λ(number of variables)"
                        ],
                        "eventId": "1"
                      },
                      {
                        "type": "child",
                        "name": "Sparsification",
                        "id": "32:29",
                        "children": [
                          {
                            "type": "show",
                            "id": "88:27",
                            "name": "Sparsification For every ε > 0, given a 3-CNF formula φ one can compute a set Φ of 3-CNF-formulas such that:",
                            "disabled": false,
                            "keywords": [
                              "Sparsification For every ε > 0, given a 3-CNF formula φ one can compute a set Φ of 3-CNF-formulas such that:",
                              "2",
                              "ε(number of variables)",
                              "in time proportional to output size"
                            ],
                            "eventId": "0"
                          },
                          {
                            "type": "show",
                            "id": "31:48",
                            "name": "- φ is satisfiabile if and only if at least one formula from Φ is satisfiable",
                            "disabled": false,
                            "keywords": [
                              "- φ is satisfiabile if and only if at least one formula from Φ is satisfiable"
                            ],
                            "eventId": "1"
                          },
                          {
                            "type": "show",
                            "id": "88:28",
                            "name": "- every formula from Φ has size at most C(ε) × (number of variables in φ)",
                            "disabled": false,
                            "keywords": [
                              "- every formula from Φ has size at most C(ε) × (number of variables in φ)",
                              "some constant that depends only on ε"
                            ],
                            "eventId": "2"
                          }
                        ],
                        "keywords": [
                          "Sparsification"
                        ],
                        "eventId": "2"
                      },
                      {
                        "type": "show",
                        "id": "31:57",
                        "name": "Proof. Let λ > 0 and choose some small δ (see below).",
                        "disabled": false,
                        "keywords": [
                          "Proof. Let λ > 0 and choose some small δ (see below)."
                        ],
                        "eventId": "3"
                      },
                      {
                        "type": "show",
                        "id": "32:49",
                        "name": "Given a 3-CNF formula φ, use the Sparsification Lemma for λ/2, yielding Φ.",
                        "disabled": false,
                        "keywords": [
                          "Given a 3-CNF formula φ, use the Sparsification Lemma for λ/2, yielding Φ."
                        ],
                        "eventId": "4"
                      },
                      {
                        "type": "show",
                        "id": "32:37",
                        "name": "Using the assumption for δ, we check if some formula from Φ is satisfiable in time:",
                        "disabled": false,
                        "keywords": [
                          "Using the assumption for δ, we check if some formula from Φ is satisfiable in time:"
                        ],
                        "eventId": "5"
                      },
                      {
                        "type": "show",
                        "id": "88:23",
                        "name": "Formula size",
                        "disabled": false,
                        "keywords": [
                          "2",
                          "λ/2(number of variables in φ)",
                          "δ C(λ) (number of variables in φ)",
                          "×",
                          "Formula size"
                        ],
                        "eventId": "6"
                      },
                      {
                        "type": "show",
                        "id": "88:22",
                        "name": "number of formulas in Φ",
                        "disabled": false,
                        "keywords": [
                          "number of formulas in Φ"
                        ],
                        "eventId": "7"
                      },
                      {
                        "type": "show",
                        "id": "88:25",
                        "name": "size of each formula in Φ",
                        "disabled": false,
                        "keywords": [
                          "size of each formula in Φ"
                        ],
                        "eventId": "8"
                      },
                      {
                        "type": "show",
                        "id": "88:24",
                        "name": "time to compute satisfiability, from assumption for δ",
                        "disabled": false,
                        "keywords": [
                          "time to compute satisfiability, from assumption for δ"
                        ],
                        "eventId": "9"
                      },
                      {
                        "type": "show",
                        "id": "88:26",
                        "name": "If δ is small enough, then λ/2 + δC(λ) < λ, and the running time is at most:",
                        "disabled": false,
                        "keywords": [
                          "If δ is small enough, then λ/2 + δC(λ) < λ, and the running time is at most:",
                          "2",
                          "λ(number of variables)"
                        ],
                        "eventId": "10"
                      }
                    ],
                    "keywords": [
                      "From variables to clauses"
                    ],
                    "eventId": "8"
                  },
                  {
                    "type": "show",
                    "id": "31:37",
                    "name": "ETH says that none of these are true",
                    "disabled": false,
                    "keywords": [
                      "ETH says that none of these are true"
                    ],
                    "eventId": "9"
                  },
                  {
                    "type": "show",
                    "id": "88:15",
                    "name": "any number k > 2 could be used",
                    "disabled": false,
                    "keywords": [
                      "any number k > 2 could be used"
                    ],
                    "eventId": "10"
                  }
                ],
                "keywords": [
                  "ETH what does it mean"
                ],
                "eventId": "1"
              },
              {
                "type": "show",
                "id": "88:9",
                "name": "4-CNF-SAT can be solved in time",
                "disabled": false,
                "keywords": [
                  "4-CNF-SAT can be solved in time",
                  "2",
                  "0.562(number of variables)"
                ],
                "eventId": "2"
              },
              {
                "type": "show",
                "id": "88:10",
                "name": "5-CNF-SAT can be solved in time",
                "disabled": false,
                "keywords": [
                  "5-CNF-SAT can be solved in time",
                  "2",
                  "0.650(number of variables)"
                ],
                "eventId": "3"
              },
              {
                "type": "show",
                "id": "88:11",
                "name": "5-CNF-SAT can be solved in time",
                "disabled": false,
                "keywords": [
                  "6-CNF-SAT can be solved in time",
                  "2",
                  "0.711(number of variables)",
                  "5-CNF-SAT can be solved in time"
                ],
                "eventId": "4"
              },
              {
                "type": "show",
                "id": "69:26",
                "name": "Paturi, Pudlak, Saks and Zane 2005",
                "disabled": false,
                "keywords": [
                  "Paturi, Pudlak, Saks and Zane 2005"
                ],
                "eventId": "5"
              },
              {
                "type": "show",
                "id": "17:19",
                "name": "Strong Exponential Time Hypothesis",
                "disabled": false,
                "keywords": [
                  "Strong Exponential Time Hypothesis",
                  "For every 0 < λ < 1, there is k such that k-CNF SAT needs time",
                  "2",
                  "λ(number of variables)"
                ],
                "eventId": "6"
              }
            ],
            "keywords": [
              "SETH"
            ],
            "eventId": "9"
          }
        ],
        "keywords": [
          "3-CNF-SAT"
        ],
        "eventId": "0"
      },
      {
        "type": "show",
        "id": "88:2",
        "name": "Use conjectured exponential lower bounds for SAT can be used for polynomial lower bounds on other problems",
        "disabled": false,
        "keywords": [
          "Use conjectured exponential lower bounds for SAT can be used for polynomial lower bounds on other problems"
        ],
        "eventId": "1"
      },
      {
        "type": "show",
        "id": "16:131",
        "name": "The naive exponential algorithm for satisfiability is optimal",
        "disabled": false,
        "keywords": [
          "The naive exponential algorithm for satisfiability is optimal"
        ],
        "eventId": "2"
      },
      {
        "type": "show",
        "id": "88:3",
        "name": "The naive quadratic algorithm for orthogonal vectors is optimal",
        "disabled": false,
        "keywords": [
          "The naive quadratic algorithm for orthogonal vectors is optimal",
          "⟹"
        ],
        "eventId": "3"
      },
      {
        "type": "show",
        "id": "88:4",
        "name": "The naive quadratic algorithm for NFA evaluation is optimal",
        "disabled": false,
        "keywords": [
          "The naive quadratic algorithm for NFA evaluation is optimal",
          "⟹"
        ],
        "eventId": "4"
      },
      {
        "type": "child",
        "name": "OVC",
        "id": "1:8",
        "children": [
          {
            "type": "show",
            "id": "17:12",
            "name": "Input. A list of n bit vectors of dimension d.",
            "disabled": false,
            "keywords": [
              "Input. Two lists of bit vectors of dimension d, both lists having length n.",
              "Question. Is some vector in the first list orthogonal to some vector on the second list?",
              "Input. A list of n bit vectors of dimension d."
            ],
            "eventId": "0"
          },
          {
            "type": "show",
            "id": "17:13",
            "name": "1",
            "disabled": false,
            "keywords": [
              "1",
              "0",
              "first list of n = 3 vectors",
              "second list of n = 3 vectors",
              "dimension d = 12"
            ],
            "eventId": "1"
          },
          {
            "type": "show",
            "id": "17:14",
            "name": "vectors are orthogonal if for every coordinate, at least one of the vectors has 0",
            "disabled": false,
            "keywords": [
              "vectors are orthogonal if for every coordinate, at least one of the vectors has 0"
            ],
            "eventId": "2"
          },
          {
            "type": "show",
            "id": "17:15",
            "name": "The naive algorithm is: check each vector pair for orthogonality.",
            "disabled": false,
            "keywords": [
              "The naive algorithm is: check each vector pair for orthogonality."
            ],
            "eventId": "3"
          },
          {
            "type": "show",
            "id": "17:16",
            "name": "Or maybe: each vector, compare it to the set of vectors seen.",
            "disabled": false,
            "keywords": [
              "Or maybe: for each vector, compare it to the set of vectors seen.",
              "Or maybe: each vector, compare it to the set of vectors seen."
            ],
            "eventId": "4"
          },
          {
            "type": "show",
            "id": "3:1",
            "name": "Orthogonal vectors conjecture: There is no algorithm that works in time",
            "disabled": false,
            "keywords": [
              "Orthogonal vectors conjecture: There is no algorithm that works in time"
            ],
            "eventId": "5"
          }
        ],
        "keywords": [
          "OVC"
        ],
        "eventId": "5"
      },
      {
        "type": "child",
        "name": "SETH implies OVC",
        "id": "5:3",
        "children": [
          {
            "type": "child",
            "name": "Real SETH",
            "id": "16:93",
            "children": [
              {
                "type": "show",
                "id": "45:4",
                "name": "Strong Exponential Time Hypothesis",
                "disabled": false,
                "keywords": [
                  "SETH",
                  "For every 0 < λ < 1, there is k such that k-CNF SAT needs time",
                  "2",
                  "λ(number of variables)",
                  "Strong Exponential Time Hypothesis"
                ],
                "eventId": "0"
              },
              {
                "type": "show",
                "id": "17:20",
                "name": "This Lecture’s Strong Exponential Time Hypothesis",
                "disabled": false,
                "keywords": [
                  "SETH’",
                  "For every 0 < λ < 1, CNF SAT needs time",
                  "2",
                  "λ(number of variables)",
                  "This Lecture’s Strong Exponential Time Hypothesis"
                ],
                "eventId": "1"
              },
              {
                "type": "show",
                "id": "16:105",
                "name": "⟹",
                "disabled": false,
                "keywords": [
                  "⟹"
                ],
                "eventId": "2"
              },
              {
                "type": "show",
                "id": "16:112",
                "name": "We will prove This Lecture’s SETH implies something, and the same will hold for Genuine SETH.",
                "disabled": false,
                "keywords": [
                  "We will prove This Lecture’s SETH implies something, and the same will hold for Genuine SETH."
                ],
                "eventId": "3"
              }
            ],
            "keywords": [
              "Real SETH"
            ],
            "eventId": "0"
          },
          {
            "type": "show",
            "id": "17:22",
            "name": "Consider an instance of CNF-SAT, with n variables.",
            "disabled": false,
            "keywords": [
              "Consider an instance of CNF-SAT, with n variables.",
              "(x1 ∨ ¬x2 ∨ x3) ∧ ( ¬x3 ∨ ¬x4 ∨ x5) ∧ (¬x1 ∨ ¬x4 ∨ x6) ∧ (x2 ∨ x3 ∨ ¬x6)"
            ],
            "eventId": "1"
          },
          {
            "type": "child",
            "name": "SETH implies OVC part 2",
            "id": "7:26",
            "children": [
              {
                "type": "show",
                "id": "5:33",
                "name": "(x1 ∨ ¬x2 ∨ x3) ∧ ( ¬x3 ∨ ¬x4 ∨ x5) ∧ (¬x1 ∨ ¬x4 ∨ x6) ∧ (x2 ∨ x3 ∨ ¬x6)",
                "disabled": false,
                "keywords": [
                  "(x1 ∨ ¬x2 ∨ x3) ∧ ( ¬x3 ∨ ¬x4 ∨ x5) ∧ (¬x1 ∨ ¬x4 ∨ x6) ∧ (x2 ∨ x3 ∨ ¬x6)"
                ],
                "eventId": "0"
              },
              {
                "type": "show",
                "id": "17:27",
                "name": "Partition variables into two halves:",
                "disabled": false,
                "keywords": [
                  "Partition variables into two halves:",
                  "x1, x2, x3, x4, x5, x6"
                ],
                "eventId": "1"
              },
              {
                "type": "show",
                "id": "17:31",
                "name": "x1 = true x2 = false x3 = false",
                "disabled": false,
                "keywords": [
                  "x1 = true x2 = false x3 = false",
                  "true",
                  "false",
                  "For each valuation of the red variables create a vector that says which clauses are true thanks to this particular valuation:"
                ],
                "eventId": "2"
              },
              {
                "type": "show",
                "id": "17:32",
                "name": "x4 = false x5 = true x6 = false",
                "disabled": false,
                "keywords": [
                  "x4 = false x5 = true x6 = false",
                  "false",
                  "true",
                  "Do the same for the blue variables:"
                ],
                "eventId": "3"
              },
              {
                "type": "show",
                "id": "17:33",
                "name": "0",
                "disabled": false,
                "keywords": [
                  "0",
                  "1"
                ],
                "eventId": "4"
              },
              {
                "type": "show",
                "id": "7:36",
                "name": "The formula is true under the combined valuation iff The two vectors are orthogonal (true = 0 and false = 1)",
                "disabled": false,
                "keywords": [
                  "The formula is true under the combined valuation iff The two vectors are orthogonal (true = 0 and false = 1)"
                ],
                "eventId": "5"
              }
            ],
            "keywords": [
              "SETH implies OVC part 2"
            ],
            "eventId": "2"
          },
          {
            "type": "show",
            "id": "5:9",
            "name": "We have created an equivalent instance of orthognal vectors with:",
            "disabled": false,
            "keywords": [
              "We have created an equivalent instance of orthognal vectors with:"
            ],
            "eventId": "3"
          },
          {
            "type": "show",
            "id": "17:23",
            "name": "Dimension",
            "disabled": false,
            "keywords": [
              "Dimension",
              "number of clauses"
            ],
            "eventId": "4"
          },
          {
            "type": "show",
            "id": "17:24",
            "name": "Number of vectors",
            "disabled": false,
            "keywords": [
              "Length of each list",
              "Number of vectors"
            ],
            "eventId": "5"
          },
          {
            "type": "show",
            "id": "104:28",
            "name": "= \\sqrt {2^n}",
            "disabled": false,
            "keywords": [
              "= \\sqrt {2^n}"
            ],
            "eventId": "6"
          },
          {
            "type": "show",
            "id": "17:25",
            "name": "If the Orthogonal Vectors Conjecture would be false, then we could solve this instance in time:",
            "disabled": false,
            "keywords": [
              "If the Orthogonal Vectors Conjecture would be false, then we could solve this instance in time:"
            ],
            "eventId": "7"
          },
          {
            "type": "show",
            "id": "17:26",
            "name": "which is faster than",
            "disabled": false,
            "keywords": [
              "which is faster than"
            ],
            "eventId": "8"
          },
          {
            "type": "show",
            "id": "7:369",
            "name": "and thus the Strong Exponential Time Hypothesis would fail.",
            "disabled": false,
            "keywords": [
              "and thus the Strong Exponential Time Hypothesis would fail."
            ],
            "eventId": "9"
          }
        ],
        "keywords": [
          "SETH implies OVC"
        ],
        "eventId": "6"
      },
      {
        "type": "child",
        "name": "NFA evaluation",
        "id": "16:146",
        "children": [
          {
            "type": "show",
            "id": "16:149",
            "name": "Input. A nondeterministic finite automaton (NFA) and an input word. Question. Does the automaton accept the word?",
            "disabled": false,
            "keywords": [
              "Input. A nondeterministic finite automaton (NFA) and an input word. Question. Does the automaton accept the word?"
            ],
            "eventId": "0"
          },
          {
            "type": "show",
            "id": "16:150",
            "name": "Naive algorithm: compute states reachable from initial one",
            "disabled": false,
            "keywords": [
              "Naive algorithm: compute states reachable from initial one"
            ],
            "eventId": "1"
          },
          {
            "type": "show",
            "id": "16:326",
            "name": "c",
            "disabled": false,
            "keywords": [
              "c",
              "a",
              "b",
              "accepting",
              "initial"
            ],
            "eventId": "2"
          },
          {
            "type": "show",
            "id": "16:325",
            "name": "Ellipse 3",
            "disabled": false,
            "keywords": [
              "Ellipse 3"
            ],
            "eventId": "3"
          },
          {
            "type": "show",
            "id": "16:344",
            "name": "Group 14",
            "disabled": false,
            "keywords": [
              "Group 14"
            ],
            "eventId": "4"
          },
          {
            "type": "show",
            "id": "16:345",
            "name": "Group 15",
            "disabled": false,
            "keywords": [
              "Group 15"
            ],
            "eventId": "5"
          },
          {
            "type": "show",
            "id": "16:346",
            "name": "Group 16",
            "disabled": false,
            "keywords": [
              "Group 16"
            ],
            "eventId": "6"
          },
          {
            "type": "show",
            "id": "16:347",
            "name": "Group 17",
            "disabled": false,
            "keywords": [
              "Group 17"
            ],
            "eventId": "7"
          },
          {
            "type": "show",
            "id": "16:348",
            "name": "Group 18",
            "disabled": false,
            "keywords": [
              "Group 18"
            ],
            "eventId": "8"
          },
          {
            "type": "show",
            "id": "16:349",
            "name": "Group 19",
            "disabled": false,
            "keywords": [
              "Group 19"
            ],
            "eventId": "9"
          },
          {
            "type": "show",
            "id": "17:35",
            "name": "Running time: (size of NFA) × (length of input word)",
            "disabled": false,
            "keywords": [
              "Running time: (size of NFA) × (length of input word)",
              "number of transitions"
            ],
            "eventId": "10"
          },
          {
            "type": "show",
            "id": "17:34",
            "name": "Theorem. Suppose that we could evaluate automata in time",
            "disabled": false,
            "keywords": [
              "Theorem. Suppose that we could evaluate automata in time",
              "(size of NFA + length of input word)",
              "2 – ε",
              "for some ε > 0"
            ],
            "eventId": "11"
          },
          {
            "type": "show",
            "id": "16:164",
            "name": "Then there would be a subquadratic algortihm for orthogonal vectors, thus violating OVC.",
            "disabled": false,
            "keywords": [
              "Then there would be a subquadratic algortihm for orthogonal vectors, thus violating OVC."
            ],
            "eventId": "12"
          },
          {
            "type": "child",
            "name": "Proof for NFA",
            "id": "16:165",
            "children": [
              {
                "type": "show",
                "id": "17:37",
                "name": "Proof. A set of vectors V contains some orthogonal pair iff",
                "disabled": false,
                "keywords": [
                  "Proof. Two lists of vectors V and W contain some orthogonal pair iff",
                  "word representing V",
                  "is accepted by",
                  "automaton representing W",
                  "Proof. A set of vectors V contains some orthogonal pair iff"
                ],
                "eventId": "0"
              },
              {
                "type": "child",
                "name": "String for list of  vectors",
                "id": "16:200",
                "children": [
                  {
                    "type": "show",
                    "id": "17:41",
                    "name": "We represent a list of vectors as a string",
                    "disabled": false,
                    "keywords": [
                      "We represent a list of vectors as a string",
                      "# 01010 # 11101 # 10101 # 11000"
                    ],
                    "eventId": "0"
                  }
                ],
                "keywords": [
                  "String for list of  vectors"
                ],
                "eventId": "1"
              },
              {
                "type": "child",
                "name": "Automaton for list of vectors",
                "id": "16:202",
                "children": [
                  {
                    "type": "show",
                    "id": "17:42",
                    "name": "For every vector v, we write an automaton that recognises the language: “lists of vectors that contain at least one vector orthogonal to v”",
                    "disabled": false,
                    "keywords": [
                      "For every vector v ∈ W, we write an automaton that recognises the language: “lists of vectors that contain at least one vector orthogonal to v”",
                      "vector v",
                      "its automaton",
                      "1",
                      "0",
                      "0, 1, #",
                      "#",
                      "0, 1",
                      "For every vector v, we write an automaton that recognises the language: “lists of vectors that contain at least one vector orthogonal to v”"
                    ],
                    "eventId": "0"
                  },
                  {
                    "type": "show",
                    "id": "16:404",
                    "name": "The automaton for a set of vectors V is the disjoint sum (language union) of the corresponding automata",
                    "disabled": false,
                    "keywords": [
                      "The automaton for a set of vectors V is the disjoint sum (language union) of the corresponding automata"
                    ],
                    "eventId": "1"
                  },
                  {
                    "type": "show",
                    "id": "16:405",
                    "name": "“lists of vectors that contain at least one vector orthogonal to some v ∈ V”",
                    "disabled": false,
                    "keywords": [
                      "“lists of vectors that contain at least one vector orthogonal to some v ∈ V”"
                    ],
                    "eventId": "2"
                  }
                ],
                "keywords": [
                  "Automaton for list of vectors"
                ],
                "eventId": "2"
              },
              {
                "type": "show",
                "id": "17:38",
                "name": "both of these have size: (number of vectors) × dimension",
                "disabled": false,
                "keywords": [
                  "both of these have size: (number of vectors) × dimension"
                ],
                "eventId": "3"
              },
              {
                "type": "show",
                "id": "17:39",
                "name": "If the assumption of the theorem were true, then we could check if V contains an orthogonal pair in time",
                "disabled": false,
                "keywords": [
                  "If the assumption of the theorem were true, then we could check if there is an orthogonal pair in V and W in time",
                  "O((2 × (number of vectors) × dimension) )",
                  "2 – ε",
                  "If the assumption of the theorem were true, then we could check if V contains an orthogonal pair in time"
                ],
                "eventId": "4"
              },
              {
                "type": "show",
                "id": "17:40",
                "name": "=",
                "disabled": false,
                "keywords": [
                  "=",
                  "O((number of vectors) × dimension )",
                  "2 – ε",
                  "contradicting OVC"
                ],
                "eventId": "5"
              }
            ],
            "keywords": [
              "Proof for NFA"
            ],
            "eventId": "13"
          }
        ],
        "keywords": [
          "NFA evaluation"
        ],
        "eventId": "7"
      }
    ],
    "keywords": [
      "Computational Complexity",
      "Lecture 1. Turing machines and their resources",
      "First slide"
    ],
    "eventId": "root"
  },
  "soundDict": {
    "1:2": {
      "0": 11.544,
      "1": 9.816,
      "2": 43.464,
      "3": 15.864,
      "4": 16.296,
      "5": 44.496,
      "6": 34.656,
      "7": 12.504,
      "finish": 35.976
    },
    "67:2": {
      "0": 5.136,
      "1": 21.144,
      "2": 28.176,
      "3": 21.336,
      "4": 2.256,
      "5": 10.536,
      "6": 16.344,
      "7": 89.736,
      "8": 48.336,
      "9": 29.184,
      "finish": 1.536
    },
    "67:203": {
      "0": 12.576,
      "1": 23.136,
      "2": 71.664,
      "3": 13.104,
      "finish": 23.976
    },
    "7:399": {
      "0": 6.984,
      "1": 35.496,
      "2": 21.624,
      "3": 60.936,
      "4": 11.736,
      "5": 10.104,
      "6": 5.904,
      "finish": 56.784
    },
    "29:0": {
      "0": 11.016,
      "1": 35.904,
      "2": 71.424,
      "3": 42.456,
      "4": 23.496,
      "5": 14.424,
      "6": 21.816,
      "7": 42.336,
      "8": 48.384,
      "9": 5.256,
      "10": 46.416,
      "finish": 37.704
    },
    "31:27": {
      "0": 4.104,
      "1": 9.216,
      "2": 6.984,
      "3": 5.976,
      "4": 32.016,
      "5": 23.136,
      "6": 15.936,
      "7": 12.984,
      "8": 47.184,
      "9": 5.136,
      "10": 11.616,
      "finish": 62.256
    },
    "32:29": {
      "0": 1.896,
      "1": 42.744,
      "2": 19.416,
      "finish": 45.096
    },
    "1:8": {
      "0": 7.416,
      "1": 24.696,
      "2": 15.984,
      "3": 78.936,
      "4": 29.784,
      "5": 52.584,
      "finish": 29.904
    },
    "5:3": {
      "0": 14.664,
      "1": 1.824,
      "2": 26.376,
      "3": 6.576,
      "4": 1.584,
      "5": 3.024,
      "6": 15.264,
      "7": 19.416,
      "8": 27.624,
      "9": 15.456,
      "finish": 14.016
    },
    "16:93": {
      "0": 9.744,
      "1": 34.464,
      "2": 38.976,
      "3": 46.536,
      "finish": 8.976
    },
    "7:26": {
      "0": 2.496,
      "1": 4.704,
      "2": 40.464,
      "3": 99.576,
      "4": 31.944,
      "5": 92.496,
      "finish": 15.024
    },
    "16:146": {
      "0": 2.976,
      "1": 8.904,
      "2": 7.896,
      "3": 55.536,
      "4": 6.816,
      "5": 2.064,
      "6": 1.584,
      "7": 1.104,
      "8": 0.984,
      "9": 0.696,
      "10": 10.704,
      "11": 21.816,
      "12": 35.256,
      "13": 23.016,
      "finish": 15.696
    },
    "16:165": {
      "0": 4.224,
      "1": 48.696,
      "2": 1.704,
      "3": 14.976,
      "4": 10.296,
      "5": 32.184,
      "finish": 22.224
    },
    "16:200": {
      "0": 4.656,
      "finish": 10.536
    },
    "16:202": {
      "0": 2.904,
      "1": 72.576,
      "2": 43.776,
      "finish": 15.984
    }
  }
}