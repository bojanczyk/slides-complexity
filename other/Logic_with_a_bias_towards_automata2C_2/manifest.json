{
  "version": 0.91,
  "presentation": "Logic with a bias towards automata, 2",
  "slideDict": {
    "102:2": "First_slide",
    "136:0": "Satisfiability",
    "136:4": "Entsheidungsproblem",
    "136:16": "Finite_words",
    "136:43": "From_automata_to_mso",
    "136:90": "Monoids",
    "137:6": "Monoid_advertising",
    "137:15": "Beyond_finite_words",
    "136:18": "Treelike_graphs",
    "140:66": "Grids_and_treelike",
    "140:156": "Treewidth_definition",
    "140:299": "A_tree_decomposition",
    "140:499": "Courcelle_Seese",
    "140:505": "Courcelle_proof",
    "140:728": "Restricted_syntax",
    "176:2": "monoids_to_automata",
    "176:49": "automata_to_monoids"
  },
  "tree": {
    "type": "child",
    "name": "First slide",
    "id": "102:2",
    "merged": false,
    "children": [
      {
        "type": "show",
        "id": "140:748",
        "name": "lecture 3",
        "disabled": false,
        "eventId": "0",
        "keywords": [
          "lecture 3"
        ]
      },
      {
        "type": "child",
        "name": "Satisfiability",
        "id": "136:0",
        "children": [
          {
            "type": "show",
            "id": "136:3",
            "name": "which models?",
            "disabled": false,
            "eventId": "0",
            "keywords": [
              "which models?"
            ]
          },
          {
            "type": "show",
            "id": "136:2",
            "name": "what logic?",
            "disabled": false,
            "eventId": "1",
            "keywords": [
              "what logic?"
            ]
          },
          {
            "type": "show",
            "id": "136:9",
            "name": "All models and first-order logic: Entscheidungsproblem",
            "disabled": false,
            "eventId": "2",
            "keywords": [
              "All models and first-order logic: Entscheidungsproblem"
            ]
          },
          {
            "type": "child",
            "name": "Entsheidungsproblem",
            "id": "136:4",
            "children": [
              {
                "type": "show",
                "id": "138:164",
                "name": "Group 16",
                "disabled": false,
                "eventId": "0",
                "keywords": [
                  "Group 16"
                ]
              },
              {
                "type": "show",
                "id": "136:7",
                "name": "Decide if a sentence of first-order logic is true [Hilbert & Ackermann 1928]",
                "disabled": false,
                "eventId": "1",
                "keywords": [
                  "Decide if a sentence of first-order logic is true [Hilbert & Ackermann 1928]"
                ]
              },
              {
                "type": "show",
                "id": "138:166",
                "name": "The Entscheidungsproblem is undecidable [Church 1936, Turing 1936]",
                "disabled": false,
                "eventId": "2",
                "keywords": [
                  "The Entscheidungsproblem is undecidable [Church 1936, Turing 1936]"
                ]
              },
              {
                "type": "show",
                "id": "138:155",
                "name": "A. true means “true in all models, including infinite ones”",
                "disabled": false,
                "eventId": "3",
                "keywords": [
                  "A. true means “true in all models, including infinite ones”"
                ]
              },
              {
                "type": "show",
                "id": "138:156",
                "name": "B. true means “true in all finite models” [Trakhtenbrot 1950]",
                "disabled": false,
                "eventId": "4",
                "keywords": [
                  "B. true means “true in all finite models” [Trakhtenbrot 1950]"
                ]
              },
              {
                "type": "show",
                "id": "140:751",
                "name": "p",
                "disabled": false,
                "eventId": "5",
                "keywords": [
                  "p",
                  "q",
                  "r",
                  "For every Turing machine, one can write a sentence of first-order logic φ whose finite models describe halting computations of the machine"
                ]
              },
              {
                "type": "show",
                "id": "138:154",
                "name": "Therefore, φ is true in some finite model if and only if the machine halts.",
                "disabled": false,
                "eventId": "6",
                "keywords": [
                  "Therefore, φ is true in some finite model if and only if the machine halts."
                ]
              },
              {
                "type": "show",
                "id": "138:157",
                "name": "Similar to B.",
                "disabled": false,
                "eventId": "7",
                "keywords": [
                  "Similar to B."
                ]
              }
            ],
            "keywords": [
              "Entsheidungsproblem"
            ],
            "eventId": "3"
          },
          {
            "type": "show",
            "id": "140:749",
            "name": "axis 1: restrict the models",
            "disabled": false,
            "eventId": "4",
            "keywords": [
              "axis 1: restrict the models"
            ]
          },
          {
            "type": "show",
            "id": "140:750",
            "name": "axis 2: restrict the logic",
            "disabled": false,
            "eventId": "5",
            "keywords": [
              "axis 2: restrict the logic"
            ]
          },
          {
            "type": "show",
            "id": "136:10",
            "name": "Words and trees",
            "disabled": false,
            "eventId": "6",
            "keywords": [
              "Words and trees"
            ]
          },
          {
            "type": "child",
            "name": "Finite words",
            "id": "136:16",
            "children": [
              {
                "type": "show",
                "id": "140:763",
                "name": "A finite word w ∈ Σ* can be viewed as a model",
                "disabled": false,
                "eventId": "0",
                "keywords": [
                  "A finite word w ∈ Σ* can be viewed as a model",
                  "underlying set: positions in the word",
                  "relations: x ≤ y and a(x) for every a ∈ Σ"
                ]
              },
              {
                "type": "show",
                "id": "140:764",
                "name": "With such models, we can use logic to define languages of finite words.",
                "disabled": false,
                "eventId": "1",
                "keywords": [
                  "With such models, we can use logic to define languages of finite words.",
                  "w ∈ (a+b)*a",
                  "w ⊨ ∀x ∃y x ≤ y ∧ a(y)",
                  "iff",
                  "for every w ∈ {a, b}*"
                ]
              },
              {
                "type": "show",
                "id": "140:765",
                "name": "For a language L ⊆ Σ*, the following conditions are equivalent:",
                "disabled": false,
                "eventId": "2",
                "keywords": [
                  "For a language L ⊆ Σ*, the following conditions are equivalent:",
                  "regular (recognized by a finite automaton)",
                  "definable in monadic second-order logic"
                ]
              },
              {
                "type": "show",
                "id": "140:766",
                "name": "because regular languages are closed under ∨ ∧ ¬ ∃",
                "disabled": false,
                "eventId": "3",
                "keywords": [
                  "because regular languages are closed under ∨ ∧ ¬ ∃"
                ]
              },
              {
                "type": "show",
                "id": "136:40",
                "name": "Arrow 7",
                "disabled": false,
                "eventId": "4",
                "keywords": [
                  "Arrow 7"
                ]
              },
              {
                "type": "child",
                "name": "From automata to mso",
                "id": "136:43",
                "children": [
                  {
                    "type": "show",
                    "id": "136:46",
                    "name": "Every regular language L ⊆ Σ* can be defined in MSO.",
                    "disabled": false,
                    "eventId": "0",
                    "keywords": [
                      "Every regular language L ⊆ Σ* can be defined in MSO."
                    ]
                  },
                  {
                    "type": "show",
                    "id": "136:85",
                    "name": "Suppose that L is recognized by an automaton with n transitions.",
                    "disabled": false,
                    "eventId": "1",
                    "keywords": [
                      "Suppose that L is recognized by an automaton with n transitions."
                    ]
                  },
                  {
                    "type": "show",
                    "id": "136:86",
                    "name": "The following MSO formula describes words that have an accepting run:",
                    "disabled": false,
                    "eventId": "2",
                    "keywords": [
                      "The following MSO formula describes words that have an accepting run:"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:771",
                    "name": "∃X1 ... ∃Xn",
                    "disabled": false,
                    "eventId": "3",
                    "keywords": [
                      "∃X1 ... ∃Xn"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:772",
                    "name": "∀x x ∈ Xi ∧ x ∉ Xj",
                    "disabled": false,
                    "eventId": "4",
                    "keywords": [
                      "∀x x ∈ Xi ∧ x ∉ Xj",
                      "every position uses exactly one transition",
                      "⋁",
                      "i ∈ {1, ..., n}",
                      "j ∈ {1, ..., n} – {i}"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:773",
                    "name": "∀x first(x) ⟹ x ∈ Xi",
                    "disabled": false,
                    "eventId": "5",
                    "keywords": [
                      "∀x first(x) ⟹ x ∈ Xi",
                      "the first position has a transition whose source is an initial state",
                      "⋁",
                      "i ∈ {1, ..., n} source of i is initial"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:774",
                    "name": "∀x ∀y (x + 1 = y) ⟹ x ∈ Xi ∧ y ∈ Xj",
                    "disabled": false,
                    "eventId": "6",
                    "keywords": [
                      "∀x ∀y (x + 1 = y) ⟹ x ∈ Xi ∧ y ∈ Xj",
                      "for consecutive positions, the transitions are consistent",
                      "⋁",
                      "i, j ∈ {1, ..., n} target of i = source of j"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:775",
                    "name": "∀x last(x) ⟹ x ∈ Xi",
                    "disabled": false,
                    "eventId": "7",
                    "keywords": [
                      "∀x last(x) ⟹ x ∈ Xi",
                      "the last position has a transition whose target is a final state",
                      "⋁",
                      "i ∈ {1, ..., n} target of i is final"
                    ]
                  }
                ],
                "keywords": [
                  "From automata to mso"
                ],
                "eventId": "5"
              },
              {
                "type": "show",
                "id": "137:14",
                "name": "Theorem. [Büchi, Elgot, Trakhtenbrot 1958] The following problem is decidable: input: MSO sentence using x < y and {a(x)}a ∈ Σ question: is it true in some w ∈ Σ*?",
                "disabled": false,
                "eventId": "6",
                "keywords": [
                  "Theorem. [Büchi, Elgot, Trakhtenbrot 1958] The following problem is decidable: input: MSO sentence using x < y and {a(x)}a ∈ Σ question: is it true in some w ∈ Σ*?"
                ]
              },
              {
                "type": "show",
                "id": "137:17",
                "name": "Because the MSO → automata translation is computable",
                "disabled": false,
                "eventId": "7",
                "keywords": [
                  "Because the MSO → automata translation is computable"
                ]
              },
              {
                "type": "child",
                "name": "Beyond finite words",
                "id": "137:15",
                "children": [
                  {
                    "type": "show",
                    "id": "137:18",
                    "name": "This also works for ω-words [Büchi] and infinite trees [Rabin].",
                    "disabled": false,
                    "eventId": "0",
                    "keywords": [
                      "This also works for ω-words [Büchi] and infinite trees [Rabin]."
                    ]
                  },
                  {
                    "type": "show",
                    "id": "137:161",
                    "name": "Here, there are blurred lines between satisfiability and model checking.",
                    "disabled": false,
                    "eventId": "1",
                    "keywords": [
                      "Here, there are blurred lines between satisfiability and model checking."
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:769",
                    "name": "iff",
                    "disabled": false,
                    "eventId": "2",
                    "keywords": [
                      "iff",
                      "satisfiability",
                      "model checking",
                      "ω-words"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:770",
                    "name": "iff",
                    "disabled": false,
                    "eventId": "3",
                    "keywords": [
                      "iff",
                      "satisfiability",
                      "model checking",
                      "infinite trees"
                    ]
                  }
                ],
                "keywords": [
                  "Beyond finite words"
                ],
                "eventId": "8"
              },
              {
                "type": "show",
                "id": "140:768",
                "name": "recognized by a finite monoid",
                "disabled": false,
                "eventId": "9",
                "keywords": [
                  "recognized by a finite monoid"
                ]
              },
              {
                "type": "child",
                "name": "Monoids",
                "id": "136:90",
                "children": [
                  {
                    "type": "show",
                    "id": "140:776",
                    "name": "A monoid is: (M, ·, ε)",
                    "disabled": false,
                    "eventId": "0",
                    "keywords": [
                      "A monoid is: (M, ·, ε)",
                      "underlying set",
                      "associative concatenation a·(b·c) = (a·b)·c",
                      "neutral element for ·"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:777",
                    "name": "A language L ⊆ Σ* is recognized by a finite monoid M if there is monoid homomorphism",
                    "disabled": false,
                    "eventId": "1",
                    "keywords": [
                      "L ⊆ Σ* is recognized by a finite monoid M if there is a homomorphism",
                      "h",
                      "Σ*",
                      "M",
                      "such that h(w) uniquely determines w ∈ L.",
                      "A language L ⊆ Σ* is recognized by a finite monoid M if there is monoid homomorphism"
                    ]
                  },
                  {
                    "type": "child",
                    "name": "monoids to automata",
                    "id": "176:2",
                    "children": [
                      {
                        "type": "show",
                        "id": "176:4",
                        "name": "Consider a language that is recognized by a finite monoid",
                        "disabled": false,
                        "eventId": "0",
                        "keywords": [
                          "Consider a language that is recognized by a finite monoid"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:47",
                        "name": "Σ*",
                        "disabled": false,
                        "eventId": "1",
                        "keywords": [
                          "Σ*",
                          "M",
                          "L",
                          "h",
                          "F",
                          "{yes, no}",
                          "finite monoid",
                          "homomorphism",
                          "accepting set",
                          "language"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:19",
                        "name": "The same language is recognized by a deterministic finite automaton:",
                        "disabled": false,
                        "eventId": "2",
                        "keywords": [
                          "The same language is recognized by a deterministic finite automaton:"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:20",
                        "name": "– states: M",
                        "disabled": false,
                        "eventId": "3",
                        "keywords": [
                          "– states: M"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:21",
                        "name": "– initial state: ε ∈ M",
                        "disabled": false,
                        "eventId": "4",
                        "keywords": [
                          "– initial state: ε ∈ M"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:22",
                        "name": "– transition function (m, a) ↦ m∙h(a)",
                        "disabled": false,
                        "eventId": "5",
                        "keywords": [
                          "– transition function (m, a) ↦ m∙h(a)"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:23",
                        "name": "– accepting states: same as in monoid",
                        "disabled": false,
                        "eventId": "6",
                        "keywords": [
                          "– accepting states: same as in monoid"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:48",
                        "name": "After reading a word abcde, the automaton is in state",
                        "disabled": false,
                        "eventId": "7",
                        "keywords": [
                          "After reading a word abcde, the automaton is in state",
                          "h(a)",
                          "h(ε)",
                          "h(b)",
                          "h(c)",
                          "h(d)",
                          "h(e)",
                          "dots are monoid operations"
                        ]
                      }
                    ],
                    "keywords": [
                      "monoids to automata"
                    ],
                    "eventId": "2"
                  },
                  {
                    "type": "child",
                    "name": "automata to monoids",
                    "id": "176:49",
                    "children": [
                      {
                        "type": "show",
                        "id": "176:51",
                        "name": "Consider a language that is recognized by a deterministic finite automaton with states Q.",
                        "disabled": false,
                        "eventId": "0",
                        "keywords": [
                          "Consider a language that is recognized by a deterministic finite automaton with states Q."
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:63",
                        "name": "Consider the function",
                        "disabled": false,
                        "eventId": "1",
                        "keywords": [
                          "Consider the function",
                          "Σ*",
                          "(Q → Q)",
                          "h",
                          "functions from states to states",
                          "which maps a word to its corresponding state transformation."
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:60",
                        "name": "This is a homomorphism into a finite monoid.",
                        "disabled": false,
                        "eventId": "2",
                        "keywords": [
                          "This is a homomorphism into a finite monoid."
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:61",
                        "name": "The accepting set is state transformations, which map the initial state to some accepting state.",
                        "disabled": false,
                        "eventId": "3",
                        "keywords": [
                          "The accepting set is state transformations, which map the initial state to some accepting state."
                        ]
                      },
                      {
                        "type": "show",
                        "id": "176:62",
                        "name": "Also works for nondeterministic automata, except that we use the monoid of binary relations on Q.",
                        "disabled": false,
                        "eventId": "4",
                        "keywords": [
                          "Also works for nondeterministic automata, except that we use the monoid of binary relations on Q."
                        ]
                      }
                    ],
                    "keywords": [
                      "automata to monoids"
                    ],
                    "eventId": "3"
                  },
                  {
                    "type": "child",
                    "name": "Monoid advantages",
                    "id": "137:6",
                    "children": [
                      {
                        "type": "show",
                        "id": "137:8",
                        "name": "Monoids have more structure and theory than automata.",
                        "disabled": false,
                        "eventId": "0",
                        "keywords": [
                          "Monoids have more structure and theory than automata."
                        ]
                      },
                      {
                        "type": "show",
                        "id": "137:9",
                        "name": "1. Powerful decomposition results for finite monoids Superior to automata concepts like “strongly connected component”",
                        "disabled": false,
                        "eventId": "1",
                        "keywords": [
                          "1. Powerful decomposition results for finite monoids Superior to automata concepts like “strongly connected component”"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "137:12",
                        "name": "Example: factorization forests",
                        "disabled": false,
                        "eventId": "2",
                        "keywords": [
                          "Example: factorization forests"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "137:10",
                        "name": "2. Natural subclasses of finite monoids Examples: groups, commutative monoids",
                        "disabled": false,
                        "eventId": "3",
                        "keywords": [
                          "2. Natural subclasses of finite monoids Examples: groups, commutative monoids"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "137:13",
                        "name": "Schützenberger, McNaughton and Papert: group-free monoids recognize exactly the first-order definable languages",
                        "disabled": false,
                        "eventId": "4",
                        "keywords": [
                          "Schützenberger, McNaughton and Papert: group-free monoids recognize exactly the first-order definable languages"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "137:11",
                        "name": "3. Beyond finite words, sometimes monoids generalize better than automata “Graph monoids” are a thing, “graph automata” not so much.",
                        "disabled": false,
                        "eventId": "5",
                        "keywords": [
                          "3. Beyond finite words, sometimes monoids generalize better than automata “Graph monoids” are a thing, “graph automata” not so much."
                        ]
                      }
                    ],
                    "keywords": [
                      "Monoid advantages"
                    ],
                    "eventId": "4"
                  }
                ],
                "keywords": [
                  "Monoids"
                ],
                "eventId": "10"
              }
            ],
            "keywords": [
              "Finite words"
            ],
            "eventId": "7"
          },
          {
            "type": "show",
            "id": "138:172",
            "name": "Treewidth",
            "disabled": false,
            "eventId": "8",
            "keywords": [
              "Treewidth"
            ]
          },
          {
            "type": "child",
            "name": "Treelike graphs",
            "id": "136:18",
            "children": [
              {
                "type": "show",
                "id": "140:756",
                "name": "We can also view a graph as a model. The underlying set is the disjoint union of vertices and edges, and there is one relation incident (v, e).",
                "disabled": false,
                "eventId": "0",
                "keywords": [
                  "We can view a graph as a model. The underlying set is the disjoint union of vertices and edges, and there is one relation incident (v, e).",
                  "undirected",
                  "We can also view a graph as a model. The underlying set is the disjoint union of vertices and edges, and there is one relation incident (v, e)."
                ]
              },
              {
                "type": "show",
                "id": "137:265",
                "name": "alternative choice: underlying set is vertices only, and there is relation edge(v, w)",
                "disabled": false,
                "eventId": "1",
                "keywords": [
                  "alternative choice: underlying set is vertices only, and there is relation edge(v, w)"
                ]
              },
              {
                "type": "show",
                "id": "137:263",
                "name": "Already for first-order logic, the satisfiability problem is undecidable: input: a first-order sentence using the incident relation question: is it true in some graph?",
                "disabled": false,
                "eventId": "2",
                "keywords": [
                  "Already for first-order logic, the satisfiability problem is undecidable: input: a first-order sentence using the incident relation question: is it true in some graph?"
                ]
              },
              {
                "type": "show",
                "id": "137:264",
                "name": "undecidable also if we ask for finite graphs",
                "disabled": false,
                "eventId": "3",
                "keywords": [
                  "undecidable also if we ask for finite graphs"
                ]
              },
              {
                "type": "child",
                "name": "Grids and treelike",
                "id": "140:66",
                "children": [
                  {
                    "type": "show",
                    "id": "140:757",
                    "name": "The graphs that witness undecidability look like this:",
                    "disabled": false,
                    "eventId": "0",
                    "keywords": [
                      "The graphs that witness undecidability look like this:"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:758",
                    "name": "What about graphs that look like this:",
                    "disabled": false,
                    "eventId": "1",
                    "keywords": [
                      "What about graphs that look like this:"
                    ]
                  },
                  {
                    "type": "child",
                    "name": "Treewidth definition",
                    "id": "140:156",
                    "children": [
                      {
                        "type": "show",
                        "id": "140:158",
                        "name": "A graph with ports is a graph with distinguished distinguished vertices.",
                        "disabled": false,
                        "eventId": "0",
                        "keywords": [
                          "A graph with ports is a graph with distinguished distinguished vertices."
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:269",
                        "name": "ports",
                        "disabled": false,
                        "eventId": "1",
                        "keywords": [
                          "ports"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:157",
                        "name": "Definition. A graph has treewidth k ∈ {1,2, ...} if it can be constructed using the following operations, so that in every moment at most k+1 ports are used.",
                        "disabled": false,
                        "eventId": "2",
                        "keywords": [
                          "Definition. A graph has treewidth k ∈ {1,2, ...} if it can be constructed using the following operations, so that in every moment at most k+1 ports are used."
                        ]
                      },
                      {
                        "type": "hide",
                        "id": "140:269",
                        "name": "ports",
                        "disabled": false,
                        "eventId": "3",
                        "keywords": [
                          "ports"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:159",
                        "name": "Constant",
                        "disabled": false,
                        "eventId": "4",
                        "keywords": [
                          "Constant",
                          "We have a constant for every graph where all vertices are distinguished."
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:171",
                        "name": "Forget",
                        "disabled": false,
                        "eventId": "5",
                        "keywords": [
                          "Forget",
                          "Input: a graph with ports, and a chosen port"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:189",
                        "name": "Output: the chosen port is no longer a port",
                        "disabled": false,
                        "eventId": "6",
                        "keywords": [
                          "Output: the chosen port is no longer a port"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:235",
                        "name": "Fuse",
                        "disabled": false,
                        "eventId": "7",
                        "keywords": [
                          "Fuse",
                          "Input: two graphs with ports, and a partial bijection between the ports",
                          "bijection"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:205",
                        "name": "Output: the disjoint union, except that pairs from the bijection are fused",
                        "disabled": false,
                        "eventId": "8",
                        "keywords": [
                          "Output: the disjoint union, except that pairs from the bijection are fused"
                        ]
                      },
                      {
                        "type": "child",
                        "name": "A tree decomposition",
                        "id": "140:299",
                        "children": [
                          {
                            "type": "show",
                            "id": "140:495",
                            "name": "The 8-cycle has treewidth 2, because it can be constructed using 3 ports.",
                            "disabled": false,
                            "eventId": "0",
                            "keywords": [
                              "The 8-cycle has treewidth 2, because it can be constructed using 3 ports."
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:300",
                            "name": "Group 39",
                            "disabled": false,
                            "eventId": "1",
                            "keywords": [
                              "Group 39"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:334",
                            "name": "Group 40",
                            "disabled": false,
                            "eventId": "2",
                            "keywords": [
                              "Group 40"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:308",
                            "name": "Group 41",
                            "disabled": false,
                            "eventId": "3",
                            "keywords": [
                              "Group 41"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:320",
                            "name": "Group 43",
                            "disabled": false,
                            "eventId": "4",
                            "keywords": [
                              "Group 43"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:343",
                            "name": "Group 44",
                            "disabled": false,
                            "eventId": "5",
                            "keywords": [
                              "Group 44"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:314",
                            "name": "Group 45",
                            "disabled": false,
                            "eventId": "6",
                            "keywords": [
                              "Group 45"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:368",
                            "name": "Group 46",
                            "disabled": false,
                            "eventId": "7",
                            "keywords": [
                              "Group 46"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:354",
                            "name": "Group 47",
                            "disabled": false,
                            "eventId": "8",
                            "keywords": [
                              "Group 47"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:383",
                            "name": "Group 48",
                            "disabled": false,
                            "eventId": "9",
                            "keywords": [
                              "Group 48"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:456",
                            "name": "Group 49",
                            "disabled": false,
                            "eventId": "10",
                            "keywords": [
                              "Group 49"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:476",
                            "name": "Group 50",
                            "disabled": false,
                            "eventId": "11",
                            "keywords": [
                              "Group 50"
                            ]
                          },
                          {
                            "type": "show",
                            "id": "140:496",
                            "name": "All cycles have treewidth 2.",
                            "disabled": false,
                            "eventId": "12",
                            "keywords": [
                              "All cycles have treewidth 2."
                            ]
                          }
                        ],
                        "keywords": [
                          "A tree decomposition"
                        ],
                        "eventId": "9"
                      }
                    ],
                    "keywords": [
                      "Treewidth definition"
                    ],
                    "eventId": "2"
                  }
                ],
                "keywords": [
                  "Grids and treelike"
                ],
                "eventId": "4"
              },
              {
                "type": "child",
                "name": "Courcelle Seese",
                "id": "140:499",
                "children": [
                  {
                    "type": "show",
                    "id": "140:501",
                    "name": "Theorem. [Courcelle] The following problem is decidable: input: an MSO sentence φ and k ∈ {1, 2, ..} question: is φ true in some graph of treewidth at most k?",
                    "disabled": false,
                    "eventId": "0",
                    "keywords": [
                      "Theorem. [Courcelle] The following problem is decidable: input: an MSO sentence φ and k ∈ {1, 2, ..} question: is φ true in some graph of treewidth at most k?"
                    ]
                  },
                  {
                    "type": "child",
                    "name": "Courcelle proof",
                    "id": "140:505",
                    "children": [
                      {
                        "type": "show",
                        "id": "140:760",
                        "name": "A width k tree decomposition can be seen as a finite tree",
                        "disabled": false,
                        "eventId": "0",
                        "keywords": [
                          "A width k tree decomposition can be seen as a finite tree",
                          "over the finite alphabet of operations on graphs with k+1 ports"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:727",
                        "name": "Using MSO, one can interpret the graph in the tree decomposition:",
                        "disabled": false,
                        "eventId": "1",
                        "keywords": [
                          "Using MSO, one can interpret the graph in the tree decomposition:"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:761",
                        "name": "width k tree decompositions",
                        "disabled": false,
                        "eventId": "2",
                        "keywords": [
                          "width k tree decompositions",
                          "graphs of treewidth k",
                          "{yes, no}",
                          "φ",
                          "underlying graph",
                          "∀k ∀φ ∃φ",
                          "MSO formula on graphs",
                          "MSO formula on trees"
                        ]
                      },
                      {
                        "type": "show",
                        "id": "140:762",
                        "name": "φ is true in some graph of treewidth k",
                        "disabled": false,
                        "eventId": "3",
                        "keywords": [
                          "φ is true in some graph of treewidth k",
                          "φ is true in some tree",
                          "iff",
                          "a decidable problem"
                        ]
                      }
                    ],
                    "keywords": [
                      "Courcelle proof"
                    ],
                    "eventId": "1"
                  },
                  {
                    "type": "show",
                    "id": "140:503",
                    "name": "A deep theorem of Robertson and Seymour says that if a graph has large treewidth, then it contains a large grid as a minor.",
                    "disabled": false,
                    "eventId": "2",
                    "keywords": [
                      "A deep theorem of Robertson and Seymour says that if a graph has large treewidth, then it contains a large grid as a minor."
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:504",
                    "name": "MSO can find that minor, and use it to describe a computation of a Turing machine. Hence:",
                    "disabled": false,
                    "eventId": "3",
                    "keywords": [
                      "MSO can find that minor, and use it to describe a computation of a Turing machine. Hence:"
                    ]
                  },
                  {
                    "type": "show",
                    "id": "140:502",
                    "name": "Theorem. [Seese] If C is a class of graphs of unbouned treewidth, then the following problem is undecidable: input: an MSO sentence φ question: is φ true in some graph from C?",
                    "disabled": false,
                    "eventId": "4",
                    "keywords": [
                      "Theorem. [Seese] If C is a class of graphs of unbouned treewidth, then the following problem is undecidable: input: an MSO sentence φ question: is φ true in some graph from C?"
                    ]
                  }
                ],
                "keywords": [
                  "Courcelle Seese"
                ],
                "eventId": "5"
              }
            ],
            "keywords": [
              "Treelike graphs"
            ],
            "eventId": "9"
          },
          {
            "type": "child",
            "name": "Restricted syntax",
            "id": "140:728",
            "children": [
              {
                "type": "show",
                "id": "140:735",
                "name": "I will not talk much about fragments of first-order logic, for which satisfiability over all models is decidable, such as:",
                "disabled": false,
                "eventId": "0",
                "keywords": [
                  "I will not talk much about fragments of first-order logic, for which satisfiability over all models is decidable, such as:"
                ]
              },
              {
                "type": "show",
                "id": "140:753",
                "name": "∃* formulas",
                "disabled": false,
                "eventId": "1",
                "keywords": [
                  "∃* formulas",
                  "∃x ∃y ∃z R(x, y) ∧ R(x, z) ∧ ¬R(y, z)",
                  "if such a formula is true, then it is true in model with at most 3 elements"
                ]
              },
              {
                "type": "show",
                "id": "140:752",
                "name": "Also: ∃*∀* [Bernays Schönfinkel 1928], ∃*∀ ∃* [Ackermann 1928], ...",
                "disabled": false,
                "eventId": "2",
                "keywords": [
                  "Also: ∃*∀* [Bernays Schönfinkel 1928], ∃*∀ ∃* [Ackermann 1928], ...",
                  "See the book[Börger, Grädel, Gurevich 1997]"
                ]
              },
              {
                "type": "show",
                "id": "140:754",
                "name": "Two-variable first-order logic [Mortimer 1975]",
                "disabled": false,
                "eventId": "3",
                "keywords": [
                  "Two-variable first-order logic [Mortimer 1975]",
                  "∃x ∃y R(x, y) ∧ ( ∃x R(x, y) ∧ ( ∃y R(x, y) ∧ ( ∃x R(x, y))))",
                  "directed graphs with a path of length 4"
                ]
              },
              {
                "type": "show",
                "id": "140:747",
                "name": "Robustly decidable using counting methods forthcoming book [Pratt-Hartmann]",
                "disabled": false,
                "eventId": "4",
                "keywords": [
                  "Robustly decidable using counting methods forthcoming book [Pratt-Hartmann]"
                ]
              },
              {
                "type": "show",
                "id": "140:755",
                "name": "The guarded fragment [Andréka, van Benthem, Németi 1998]",
                "disabled": false,
                "eventId": "5",
                "keywords": [
                  "The guarded fragment [Andréka, van Benthem, Németi 1998]",
                  "A syntactic restriction on first-order logic which guarantees: φ is true in some model iff φ is true in some model of treewidth at most |φ|"
                ]
              }
            ],
            "keywords": [
              "Restricted syntax"
            ],
            "eventId": "10"
          }
        ],
        "keywords": [
          "Satisfiability"
        ],
        "eventId": "1"
      }
    ],
    "keywords": [
      "with a strong bias towards automata",
      "Logic in computer science",
      "Mikołaj Bojańczyk (Warsaw)",
      "Satisfiability is φ true in some model?",
      "? ⊨ φ",
      "Model checking is φ true in some model M?",
      "M ⊨ φ",
      "?",
      "M fixed, φ input",
      "M input, φ input",
      "M input, φ fixed",
      "Part 1.",
      "Part 2.",
      "Part 3.",
      "Two decision problems for logics",
      "Here, “logic” refers to first-order logic and its variants, such as second-order logic",
      "First slide"
    ],
    "eventId": "root"
  },
  "soundDict": {
    "102:2": {
      "0": 28.224,
      "1": 9.384,
      "finish": 46.464
    },
    "136:0": {
      "0": 5.664,
      "1": 3.576,
      "2": 4.944,
      "3": 31.776,
      "4": 4.704,
      "5": 13.536,
      "6": 22.176,
      "7": 14.664,
      "8": 17.976,
      "9": 23.016,
      "10": 37.584,
      "finish": 17.064
    },
    "136:4": {
      "0": 2.256,
      "1": 19.296,
      "2": 4.056,
      "3": 14.784,
      "4": 11.136,
      "5": 34.704,
      "6": 77.976,
      "7": 67.056,
      "finish": 17.736
    },
    "136:16": {
      "0": 2.856,
      "1": 32.376,
      "2": 48.624,
      "3": 34.896,
      "4": 27.144,
      "5": 15.696,
      "6": 13.536,
      "7": 15.096,
      "8": 36.264,
      "9": 17.544,
      "10": 18.456,
      "finish": 12.504
    },
    "136:43": {
      "0": 1.944,
      "1": 6.504,
      "2": 16.416,
      "3": 2.256,
      "4": 8.064,
      "5": 25.104,
      "6": 29.064,
      "7": 26.256,
      "finish": 33.336
    },
    "137:15": {
      "0": 4.584,
      "1": 31.776,
      "2": 31.704,
      "3": 68.904,
      "finish": 55.464
    },
    "136:90": {
      "0": 0.816,
      "1": 41.064,
      "2": 84.336,
      "3": 18.864,
      "4": 10.656,
      "finish": 4.224
    },
    "176:2": {
      "0": 3.816,
      "1": 4.824,
      "2": 33.096,
      "3": 7.704,
      "4": 2.616,
      "5": 2.976,
      "6": 10.776,
      "7": 22.704,
      "finish": 86.664
    },
    "176:49": {
      "0": 2.616,
      "1": 5.184,
      "2": 47.136,
      "3": 9.576,
      "4": 13.704,
      "finish": 19.296
    },
    "137:6": {
      "0": 1.464,
      "1": 23.016,
      "2": 49.056,
      "3": 22.056,
      "4": 74.376,
      "5": 76.104,
      "finish": 116.544
    },
    "136:18": {
      "0": 1.656,
      "1": 34.944,
      "2": 18.816,
      "3": 18.744,
      "4": 53.256,
      "5": 6.456,
      "finish": 68.184
    },
    "140:66": {
      "0": 1.344,
      "1": 35.424,
      "2": 36.936,
      "finish": 22.536
    },
    "140:156": {
      "0": 16.224,
      "1": 18.816,
      "2": 11.496,
      "3": 29.904,
      "4": 2.736,
      "5": 20.256,
      "6": 13.296,
      "7": 15.336,
      "8": 13.704,
      "9": 59.616,
      "finish": 21.144
    },
    "140:299": {
      "0": 4.464,
      "1": 10.536,
      "2": 8.784,
      "3": 8.496,
      "4": 9.456,
      "5": 18.264,
      "6": 14.424,
      "7": 2.856,
      "8": 4.224,
      "9": 8.016,
      "10": 3.864,
      "11": 3.336,
      "12": 6.264,
      "finish": 10.344
    },
    "140:499": {
      "0": 1.296,
      "1": 21.936,
      "2": 20.856,
      "3": 62.424,
      "4": 53.976,
      "finish": 32.736
    },
    "140:505": {
      "0": 2.424,
      "1": 44.184,
      "2": 8.784,
      "3": 56.424,
      "finish": 36.984
    },
    "140:728": {
      "0": 3.024,
      "1": 40.104,
      "2": 58.824,
      "3": 71.784,
      "4": 60.336,
      "5": 49.656,
      "finish": 87.864
    }
  }
}